{"version":3,"sources":["index.js"],"names":["Meeting","attrs","options","namespace","MEETINGS","getMediaStreams","mediaDirection","audioVideo","sharePreferences","sendAudio","sendVideo","sendShare","Media","getUserMedia","then","response","reject","MediaError","resolve","getDevices","id","uuid","v4","correlationId","userId","resource","deviceUrl","roapSeq","ROAP_SEQ_PRE","meetingInfo","members","Members","locusUrl","locus","url","parent","webex","roap","Roap","reconnectionManager","ReconnectionManager","audio","video","meetingFiniteStateMachine","MeetingStateMachine","create","stats","internalStats","convoUrl","sipUri","partner","type","owner","hostId","policy","meetingRequest","MeetingRequest","locusInfo","LocusInfo","updateMeetingObject","bind","mediaProperties","MediaProperties","inMeetingActions","InMeetingActions","isSharing","callEvents","floorGrantPending","setUpLocusInfoListeners","setUpLocusInfoSelfListener","setUpLocusInfoMeetingListener","setUpLocusFullStateListener","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setUpLocusMediaSharesListener","setUpLocusInfoMeetingInfoListener","setUpLocusInfoAssignHostListener","on","EVENTS","LOCUS_INFO_CAN_ASSIGN_HOST","payload","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_ACTIONS_UPDATE","canAssignHost","canLock","getCanLock","canUnlock","getCanUnlock","setCanAssignHost","LOCUSINFO","FULL_STATE_TYPE_UPDATE","locusFullStateTypeUpdate","event","trackingId","LoggerProxy","logger","error","identifiers","deviceId","locusId","split","pop","locusStartTime","fullState","lastActive","Metrics","initPayload","internal","metrics","submitCallDiagnosticEvents","LOCUS_INFO_UPDATE_SELF","locusSelfUpdate","newSelf","state","MEETING_STATE","STATES","JOINED","share","LOCUS_INFO_UPDATE_HOST","locusHostUpdate","LOCUS_INFO_UPDATE_PARTICIPANTS","locusParticipantsUpdate","LOCUS_INFO_UPDATE_MEDIA_SHARES","locusMediaSharesUpdate","LOCUS_INFO_UPDATE_URL","locusUrlUpdate","MEETING_LOCKED","MEETING_UNLOCKED","MEETING_INFO_UPDATED","info","newCanLock","newCanUnlock","self","moderator","MeetingUtil","canUserLock","canUserUnlock","getCanAssignHost","setCanLock","setCanUnlock","SELF_MUTED_BY_OTHERS","MEETING_SELF_MUTED_BY_OTHERS","SELF_UNADMITTED_GUEST","MEETING_SELF_LOBBY_WAITING","postEvent","eventType","LOBBY_ENTERED","meeting","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","LOBBY_EXITED","REMOTE_ANSWERED_DECLINED","remote","DESTROY_MEETING","wirelessShare","shareTrack","onended","stop","shouldLeave","leave","warn","catch","cleanUp","meetingId","object","length","forEach","key","invitee","alertIfActive","addMember","memberIds","admitMembers","memberId","removeMember","mute","muteMember","transferHostToMember","override","createStats","log","StatsUtil","generateOptions","STATS","CONFIG","config","WebRTCStats","destroySenders","destroyReceivers","isMuted","isSelf","body","errors","conversationUrl","setSipUri","sipMeetingUri","setLocus","participants","getLocusPartner","_CALL_","person","sipUrl","emailAddress","email","seq","mtgLocus","mediaConnections","selfId","mediaId","host","initialSetup","pc","ontrack","streams","remoteStream","MEDIA_READY","EVENT_TYPES","REMOTE_AUDIO","stream","MediaUtil","createMediaStream","getAudioTracks","REMOTE_VIDEO","getVideoTracks","REMOTE_SHARE","unsetRemoteStream","stopStream","MEDIA_STOPPED","REMOTE","remoteShare","localStream","getTrack","audioTrack","videoTrack","settings","getSettings","setMediaSettings","echoCancellation","noiseSuppression","mediaSettings","setLocalAudioTrack","setLocalVideoTrack","aspectRatio","frameRate","height","width","LOCAL","localShare","setLocalShareTrack","contentTracks","displaySurface","cursor","screen","stopShare","LOCAL_SHARE","stopTracks","unsetLocalVideoTrack","unsetLocalShareTrack","reconnection","detection","mercury","ONLINE","reconnect","PeerConnectionManager","close","peerConnection","unsetPeerConnection","off","toggle","ParameterError","MUTED","data","USER_INTERACTION","mediaType","AUDIO","e","UNMUTED","VIDEO","joinOptions","audioVideoOptions","join","joinResponse","addMedia","mediaResponse","media","local","MEETING_RECONNECTION_STARTING","MEDIA_RECONNECTING","MEETING_RECONNECTION_SUCCESS","MEDIA_RECOVERED","MEETING_RECONNECTION_FAILURE","ReconnectionError","MEDIA_RECONNECTION_FAILED","finally","reset","CALL_INITIATED","pstnAudioType","hostPin","pinCollection","MEETING_STATE_MACHINE","ENDED","RINGING","ring","_JOIN_","resourceId","destination","joinMeetingOptions","fail","mediaCapabilities","rx","share_audio","whiteboard","tx","moveMedia","moveToResource","updateMedia","receiveVideo","receiveAudio","receiveShare","oldCorrelationId","meetings","meetingCollection","set","leaveMeeting","moveMeeting","delete","isGuestUnjoined","guest","MEDIA_CAPABILITIES","validateOptions","setPeerConnectionEvents","preMedia","attachMedia","setRemoteStream","startInternalStats","err","timerCount","joiningTimer","setInterval","meetingState","FULL_STATE","ACTIVE","clearInterval","Error","sendRoapMediaRequest","sdp","signalingState","SDP","STABLE","canUpdateMedia","previousSendShareStatus","setContentSlides","checkForStopShare","startShare","audioTransceiver","track","updateTransceiver","sendTrack","receiveTrack","transceiver","previousMediaDirection","setLocalTracks","videoTransceiver","previousShareStatus","shareTransceiver","setMediaDirection","AudioStateMachine","VideoStateMachine","_INCOMING_","acknowledgeMeeting","ALERT_DISPLAYED","message","reason","_BUSY_","declineMeeting","decline","LEAVE","canProceed","content","mediaShares","find","element","name","CONTENT","SHARE_INITIATED","changeMeetingFloor","disposition","FLOOR_ACTION","GRANTED","personUrl","uri","resourceUrl","MEETING_STARTED_SHARING_LOCAL","LOCAL_SHARE_FLOOR_GRANTED","SHARE_STOPPED","RELEASED","MEETING_STOPPED_SHARING_LOCAL","startRecording","stopRecording","pauseRecording","resumeRecording","lockMeeting","unlockMeeting","StatelessWebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Metrics from '../metrics';\nimport {trigger, mediaType, eventType} from '../metrics/config';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport MediaUtil from '../media/util';\nimport WebRTCStats from '../stats/index';\nimport StatsUtil from '../stats/util';\nimport ReconnectionError from '../common/errors/reconnection';\nimport {\n  MEETINGS,\n  EVENT_TRIGGERS,\n  EVENT_TYPES,\n  EVENTS,\n  FLOOR_ACTION,\n  _BUSY_,\n  _INCOMING_,\n  ONLINE,\n  _CALL_,\n  CONTENT,\n  ROAP_SEQ_PRE,\n  LOCUSINFO,\n  MEETING_STATE_MACHINE,\n  _JOIN_,\n  STATS,\n  MEETING_STATE,\n  FULL_STATE,\n  SDP\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\nimport MediaError from '../common/errors/media';\n\nimport InMeetingActions from './in-meeting-actions';\n\n\n/**\n * MediaDirection\n * @typedef {Object} MediaDirection\n * @property {boolean} sendAudio\n * @property {boolean} receiveAudio\n * @property {boolean} sendVideo\n * @property {boolean} receiveVideo\n * @property {boolean} sendShare\n * @property {boolean} receiveShare\n */\n\n/**\n  * AudioVideo\n  * @typedef {Object} AudioVideo\n  * @property {Object} audio\n  * @property {String} audio.deviceId\n  * @property {Object} video\n  * @property {String} video.deviceId\n  */\n\n/**\n   * SharePreferences\n   * @typedef {Object} SharePreferences\n   * @property {Object} [shareConstraints]\n   * @property {Boolean} [highFrameRate]\n   */\n\n/**\n * JoinOptions\n * @typedef {Object} JoinOptions\n * @property {String} [resourceId]\n * @property {String} [hostPin]\n * @property {Boolean} [moderator]\n */\n\n/**\n * SendOptions\n * @typedef {Object} SendOptions\n * @property {Boolean} sendAudio\n * @property {Boolean} sendVideo\n * @property {Boolean} sendShare\n */\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meetings\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meeting\n  */\n\n/**\n * Meeting Ringing Event\n * Emitted when this client should play a ringing sound, because this member is getting an incoming meeting\n * or sending out an incoming meeting\n * @event meeting:ringing\n * @instance\n * @type {Object}\n * @property {String} type // INCOMING or JOIN\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Ringing Stop Event\n * Emitted when this client should stop playing a ringing sound\n * @event meeting:ringingStop\n * @instance\n * @type {Object}\n * @property {Object} type\n * @property {Boolean} type.remoteAnswered\n * @property {Boolean} type.remoteDeclined\n * @property {String} id\n * @memberof Meeting\n */\n\n/**\n * Meeting Started Sharing Local Event\n * Emitted when this member starts sharing\n * @event meeting:startedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Stopped Sharing Local Event\n * Emitted when this member stops sharing\n * @event meeting:stoppedSharingLocal\n * @instance\n * @type {Object}\n * @memberof Meeting\n */\n\n/**\n * Meeting Locked Event\n * Emitted when a meeting is locked\n * @event meeting:locked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Unlocked Event\n * Emitted when a meeting is unlocked\n * @event meeting:unlocked\n * @instance\n * @type {Object}\n * @property {Object} info\n * @memberof Meeting\n */\n\n/**\n * Meeting Actions Update Event\n * Emitted when a user can take actions on a meeting such as lock, unlock, assign host\n * @event meeting:actionsUpdate\n * @instance\n * @type {Object}\n * @property {Boolean} canLock\n * @property {Boolean} canUnlock\n * @property {Boolean} canAssignHost\n * @memberof Meeting\n */\n\n/**\n * Meeting Muted By Others Event\n * Emitted when a member is muted by another member\n * @event meeting:self:mutedByOthers\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Guest Admitted Event\n * Emitted when a member admitted to the meeting by another member\n * @event meeting:self:guestAdmitted\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n * Meeting Self Lobby Waiting Event\n * Emitted when this member enters the lobby and is waiting for the webex meeting to begin\n * @event meeting:self:lobbyWaiting\n * @instance\n * @type {Object}\n * @property {Object} payload\n * @memberof Meeting\n */\n\n/**\n  * Reconnection Starting Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionStarting\n  * @instance\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meeting\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meeting\n  */\n\n/**\n * @description Meeting is the crux of the plugin\n * @export\n * @class Meeting\n */\nexport default class Meeting extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n  */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    this.correlationId = this.id;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @description set you -1 as default values is 0 (used to idenfify if 1st roap request was sent)\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = ROAP_SEQ_PRE;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    // TODO: needs to be defined as a class\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({locusUrl: (attrs.locus && attrs.locus.url)}, {parent: this.webex});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, {parent: this.webex});\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = new ReconnectionManager(this);\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.meetingFiniteStateMachine = MeetingStateMachine.create(this);\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.internalStats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.convoUrl = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.webex, this.id);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    /**\n     * @instance\n     * @type {InMeetingActions}\n     * @public\n     * @memberof Meeting\n    */\n    this.inMeetingActions = new InMeetingActions();\n    /**\n     * @instance\n     * @type {Boolean}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.isSharing = false;\n    /**\n     * @instance\n     * @type {Array}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.callEvents = [];\n    /**\n     * There is a pending floor requested by the user\n     * @instance\n     * @type {floorGrantPending}\n     * @private\n     * @memberof Meeting\n     */\n    this.floorGrantPending = false;\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * Proxy function for all the listener set ups\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    // meeting update listeners\n    this.setUpLocusInfoSelfListener();\n    this.setUpLocusInfoMeetingListener();\n    // members update listeners\n    this.setUpLocusFullStateListener();\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setUpLocusMediaSharesListener();\n    this.setUpLocusInfoMeetingInfoListener();\n    this.setUpLocusInfoAssignHostListener();\n  }\n\n  /**\n   * Set up the locus info listener for assign host permissions on a meeting\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoAssignHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_CAN_ASSIGN_HOST, (payload) => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setUpLocusInfoAssignHostListener'\n        },\n        EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n        {\n          canAssignHost: payload.canAssignHost,\n          canLock: this.inMeetingActions.getCanLock(),\n          canUnlock: this.inMeetingActions.getCanUnlock()\n        }\n      );\n      this.inMeetingActions.setCanAssignHost(payload.canAssignHost);\n    });\n  }\n\n  /**\n   * Set up the internal locus info full state object listener\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusFullStateListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.FULL_STATE_TYPE_UPDATE, (payload) => {\n      this.members.locusFullStateTypeUpdate(payload);\n    });\n  }\n\n  /**\n   * Send the metrics to call-analyzer dashboard\n   * @param {Object} options\n   * @param {String} options.event\n   * @param {String} options.trackingId\n   * @param {Object} options.locus\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  sendCallAnalyzerMetrics(options) {\n    const {event, trackingId, locus} = options;\n\n    if (!event) {\n      LoggerProxy.logger.error('Error [Call Analyzer Event', event || '', `]: invalid identifers or event type! ${this.correlationId}`);\n\n      return;\n    }\n\n    const identifiers = {\n      correlationId: this.correlationId,\n      userId: this.userId,\n      deviceId: this.deviceUrl\n    };\n\n    // If locus is passed take the value from there else use meeting object\n    if (locus) {\n      identifiers.locusId = locus.url.split('/').pop();\n      identifiers.locusStartTime = locus.fullState.lastActive;\n    }\n    else if (this.locusUrl && this.locusInfo.fullState) {\n      identifiers.locusId = this.locusUrl && this.locusUrl.split('/').pop();\n      identifiers.locusStartTime = this.locusInfo.fullState && this.locusInfo.fullState.lastActive;\n    }\n\n    if (options.trackingId) {\n      identifiers.trackingId = trackingId;\n    }\n\n    const payload = Metrics.initPayload(options.event, identifiers, options);\n\n    this.webex.internal.metrics.submitCallDiagnosticEvents(payload);\n  }\n\n  /**\n   * Set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusSelfListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      this.members.locusSelfUpdate(payload);\n\n      // If user moved to a JOINED state and there is a pending floor grant trigger it\n      if (this.floorGrantPending && payload.newSelf.state === MEETING_STATE.STATES.JOINED) {\n        this.share()\n          .then(() => { this.floorGrantPending = false; });\n      }\n    });\n  }\n\n  /**\n   * Set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusHostListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      this.members.locusHostUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusParticipantsListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.members.locusParticipantsUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusMediaSharesListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      this.members.locusMediaSharesUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info url listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusUrlListener() {\n    this.locusInfo.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      this.members.locusUrlUpdate(payload);\n    });\n  }\n\n  /**\n   * Set up the locus info meeting info listener\n   * @returns {undefined}\n   * @private\n   * @memberof meeting\n   */\n  setUpLocusInfoMeetingInfoListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_LOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_LOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_UNLOCKED, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingInfoListener'\n          },\n          EVENT_TRIGGERS.MEETING_UNLOCKED,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.MEETING_INFO_UPDATED, (payload) => {\n      if (payload && payload.info) {\n        let newCanLock;\n        let newCanUnlock;\n\n        if (payload.self && !payload.self.moderator) {\n          newCanLock = false;\n          newCanUnlock = false;\n        }\n        else {\n          newCanLock = MeetingUtil.canUserLock(payload.info.moderator, payload.info.policy);\n          newCanUnlock = MeetingUtil.canUserUnlock(payload.info.moderator, payload.info.policy);\n        }\n\n        if (newCanLock && !this.inMeetingActions.canLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: true,\n              canUnlock: false,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        if (newCanUnlock && !this.inMeetingActions.canUnlock || !newCanLock) {\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'setUpLocusInfoMeetingInfoListener'\n            },\n            EVENT_TRIGGERS.MEETING_ACTIONS_UPDATE,\n            {\n              canLock: false,\n              canUnlock: true,\n              canAssignHost: this.inMeetingActions.getCanAssignHost()\n            }\n          );\n        }\n        this.inMeetingActions.setCanLock(newCanLock || false);\n        this.inMeetingActions.setCanUnlock(newCanUnlock || false);\n      }\n    });\n  }\n\n  /**\n   * Internal function to listen to the self object changes\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_MUTED_BY_OTHERS, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_MUTED_BY_OTHERS,\n          {\n            payload\n          }\n        );\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_ENTERED,\n          meeting: this\n        });\n      }\n    });\n    this.locusInfo.on(LOCUSINFO.EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoSelfListener'\n          },\n          EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED,\n          {\n            payload\n          }\n        );\n\n        Metrics.postEvent({\n          event: eventType.LOBBY_EXITED,\n          meeting: this\n        });\n      }\n    });\n  }\n\n  /**\n   * Add LocusInfo nested object listeners (from child to parent)\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoMeetingListener() {\n    this.locusInfo.on(EVENTS.REMOTE_ANSWERED_DECLINED, (payload) => {\n      this.meetingFiniteStateMachine.remote(payload);\n    });\n    this.locusInfo.on(EVENTS.DESTROY_MEETING, (payload) => {\n      // if self state is NOT left\n\n      // TODO: Handle sharing and wireless sharing when meeting end\n      if (this.wirelessShare) {\n        if (this.mediaProperties.shareTrack) {\n          this.mediaProperties.shareTrack.onended = null;\n          this.mediaProperties.shareTrack.stop();\n        }\n      }\n      // when multiple WEB deviceType join with same user\n      // and some of the devices are joined and some are left\n      // when your own device is still connected you want to leave and destroy\n      // else you want to just destroy\n      // this looks odd because when it leaves it should destroy, but we get a\n      // leave response and we should destroy it on the next event loop\n      // the leave response gets parsed and we decide if we want to destroy the meeting\n      // the first time we just leave it, the second time it comes it destroys it from the collection\n      if (payload.shouldLeave) {\n        // TODO:  We should do cleaning of meeting object if the shouldLeave: false because there might be meeting object which we are not cleaning\n\n        this.leave().then(() => {\n          LoggerProxy.logger.warn('meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#The meeting has been left, but has not been destroyed, you should see a later event for leave.');\n        }).catch((error) => {\n          LoggerProxy.logger.error(`meeting/index->setUpLocusInfoMeetingListener:DESTROY_MEETING#Issue with leave for meeting, meeting still in collection: ${this.meeting}, error: ${error}`);\n        });\n      }\n      else {\n        MeetingUtil.cleanUp(this);\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setUpLocusInfoMeetingListener'\n          },\n          EVENTS.DESTROY_MEETING,\n          {\n            response: payload,\n            meetingId: this.id\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set meeting values rather than events\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * Invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} [alertIfActive]\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * Admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Remove the member from the meeting, boot them\n   * @param {String} memberId\n   * @returns {Promise} see #members.removeMember\n   * @public\n   * @memberof Meeting\n   */\n  remove(memberId) {\n    return this.members.removeMember(memberId);\n  }\n\n  /**\n   * Mute another member from the meeting\n   * @param {String} memberId\n   * @param {Boolean} mute\n   * @returns {Promise} see #members.muteMember\n   * @public\n   * @memberof Meeting\n   */\n  mute(memberId, mute = true) {\n    return this.members.muteMember(memberId, mute);\n  }\n\n  /**\n   * Transfer the moderator role to another eligible member\n   * @param {String} memberId\n   * @param {Boolean} moderator\n   * @returns {Promise} see #members.transferHostToMember\n   * @public\n   * @memberof Meeting\n   */\n  transfer(memberId, moderator = true) {\n    return this.members.transferHostToMember(memberId, moderator);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - see #createStats\n   * @param {Boolean} override - override the previous getStats\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options, override) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    if (override) {\n      if (this.stats) {\n        LoggerProxy.logger.log('Meeting:index#getStats --> Overriding the previous stats object without destroying first can result in memory leaks.');\n      }\n\n      return this.createStats(options);\n    }\n\n    return this.stats;\n  }\n\n  /**\n   * write the stats builder object and assign to meeting property\n   * @param {Object} options\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    StatsUtil.generateOptions(options, STATS.CONFIG, this);\n\n    options.config = STATS.CONFIG;\n\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n\n    return this.stats;\n  }\n\n  /**\n   * if you have started a stats instance, here's how you can stop it\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  stopStats() {\n    if (this.stats) {\n      this.stats.destroySenders();\n      this.stats.destroyReceivers();\n      this.stats = null;\n    }\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {Object} meetingInfo.body\n   * @param {String} meetingInfo.body.conversationUrl\n   * @param {String} meetingInfo.body.locusUrl\n   * @param {String} meetingInfo.body.sipUri\n   * @param {Object} meetingInfo.body.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.convoUrl = meetingInfo.body.conversationUrl || this.convoUrl;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.setSipUri(meetingInfo.body.sipMeetingUri || this.sipUri);\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === _CALL_) {\n        this.setSipUri(this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email);\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq >= 0) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      LoggerProxy.logger.log(`Meeting:index->setRemoteStream/ontrack#Event received for peerConnection: ${event}`);\n      // const {transceiver} = event;\n      const streams = event.streams[0];\n\n      this.mediaProperties.remoteStream = streams;\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_AUDIO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getAudioTracks()[0]])\n        }\n      );\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setRemoteStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_VIDEO,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[0]])\n        }\n      );\n\n      if (this.mediaProperties.remoteStream.getVideoTracks()[1]) {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'setRemoteStream:pc.ontrack'\n          },\n          EVENT_TRIGGERS.MEDIA_READY,\n          {\n            type: EVENT_TYPES.REMOTE_SHARE,\n            stream: MediaUtil.createMediaStream([this.mediaProperties.remoteStream.getVideoTracks()[1]])\n          }\n        );\n      }\n    };\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetRemoteStream() {\n    this.mediaProperties.unsetRemoteStream();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  closeRemoteStream() {\n    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeRemoteStream'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED,\n        {\n          type: EVENT_TYPES.REMOTE\n        }\n      );\n    });\n  }\n\n  /**\n   * Sets the sceen stream on the class instance and triggers and event to developers\n   * @param {Object} pc a peer connection instance for the screen\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setShareStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteShare] = event.streams;\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setShareStream:pc.ontrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.REMOTE_SHARE,\n          stream: this.mediaProperties.remoteShare\n        }\n      );\n    };\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalTracks(localStream) {\n    if (localStream) {\n      const {audioTrack, videoTrack} = MeetingUtil.getTrack(localStream);\n      let settings = null;\n\n      if (audioTrack) {\n        settings = audioTrack.getSettings();\n        this.mediaProperties.setMediaSettings('audio', {\n          echoCancellation: settings.echoCancellation,\n          noiseSuppression: settings.noiseSuppression\n        });\n\n        LoggerProxy.logger.log('meeting/setLocalTracks: Audio settings.', JSON.stringify(this.mediaProperties.mediaSettings.audio));\n        this.mediaProperties.setLocalAudioTrack(audioTrack);\n      }\n\n      if (videoTrack) {\n        settings = videoTrack.getSettings();\n        this.mediaProperties.setLocalVideoTrack(videoTrack);\n        this.mediaProperties.setMediaSettings('video', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width\n        });\n        LoggerProxy.logger.log('meeting/setLocalTracks: Video settings.', JSON.stringify(this.mediaProperties.mediaSettings.video));\n      }\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalTracks'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL,\n          stream: MediaUtil.createMediaStream([this.mediaProperties.audioTrack, this.mediaProperties.videoTrack])\n        }\n      );\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShareTrack(localShare) {\n    let settings = null;\n\n    if (localShare) {\n      this.mediaProperties.setLocalShareTrack(MeetingUtil.getTrack(localShare).videoTrack);\n      const contentTracks = this.mediaProperties.shareTrack;\n\n      if (contentTracks) {\n        settings = contentTracks.getSettings();\n        this.mediaProperties.setMediaSettings('screen', {\n          aspectRatio: settings.aspectRatio,\n          frameRate: settings.frameRate,\n          height: settings.height,\n          width: settings.width,\n          displaySurface: settings.displaySurface,\n          cursor: settings.cursor\n        });\n        LoggerProxy.logger.log('meeting/setLocalTracks: Screen settings.', JSON.stringify(this.mediaProperties.mediaSettings.screen));\n      }\n\n      contentTracks.onended = () => {\n        if (this.wirelessShare) {\n          this.leave();\n        }\n        else {\n          this.stopShare();\n        }\n      };\n\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'setLocalShareTrack'\n        },\n        EVENT_TRIGGERS.MEDIA_READY,\n        {\n          type: EVENT_TYPES.LOCAL_SHARE,\n          stream: localShare\n        }\n      );\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    return Media.stopTracks(this.mediaProperties.audioTrack)\n      .then(() => Media.stopTracks(this.mediaProperties.videoTrack))\n      .then(() => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'closeLocalStream'\n          },\n          EVENT_TRIGGERS.MEDIA_STOPPED, {\n            type: EVENT_TYPES.LOCAL\n          }\n        );\n      });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    return Media.stopTracks(this.mediaProperties.shareTrack).then(() => {\n      Trigger.trigger(\n        this,\n        {\n          file: 'meeting/index',\n          function: 'closeLocalShare'\n        },\n        EVENT_TRIGGERS.MEDIA_STOPPED, {\n          type: EVENT_TYPES.LOCAL_SHARE\n        }\n      );\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalVideoTrack() {\n    this.mediaProperties.unsetLocalVideoTrack();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShareTrack() {\n    this.mediaProperties.unsetLocalShareTrack();\n  }\n\n  /**\n   * Sets the peer connections on the class\n   * sets up reconnection logic\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   * @todo remove\n   * // TODO: remove??\n   */\n  setPeerConnections() {\n    // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports\n    if (this.config.reconnection.detection) {\n      // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n      // if the meeting has active peer connections, it should try to reconnect.\n      this.webex.internal.mercury.on(ONLINE, () => {\n        this.reconnect();\n      });\n    }\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return PeerConnectionManager.close(this.mediaProperties.peerConnection);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} peerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnection();\n    if (this.config.reconnection.detection) {\n      this.webex.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        LoggerProxy.logger.info('meeting/index->muteAudio#Audio mute successful.');\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n\n        return Promise.resolve();\n      })\n      .catch((e) => {\n        LoggerProxy.logger.error(`meeting/index->muteAudio#Audio mute error ${e}`);\n      });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n\n    return this.audio.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.AUDIO}\n        });\n      });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no video control associated to the meeting'));\n    }\n\n    return this.video.toggle({\n      mute: true,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.MUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new ParameterError('no audio control associated to the meeting'));\n    }\n    const options = {};\n\n    options.mute = false;\n    options.self = true;\n\n    return this.video.toggle({\n      mute: false,\n      self: true\n    })\n      .then(() => {\n        Metrics.postEvent({\n          event: eventType.UNMUTED,\n          meeting: this,\n          data: {trigger: trigger.USER_INTERACTION, mediaType: mediaType.VIDEO}\n        });\n      });\n  }\n\n  /**\n   * Shorthand function to join AND set up media\n   * @param {Object} options - options to join with media\n   * @param {JoinOptions} [options.joinOptions] - see #join()\n   * @param {MediaDirection} options.mediaSettings - see #addMedia()\n   * @param {AudioVideo} [options.audioVideoOptions] - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   * @example\n   * joinWithMedia({\n   *  joinOptions: {resourceId: 'resourceId' },\n   *  mediaSettings: {\n   *   sendAudio: true,\n   *   sendVideo: true,\n   *   sendShare: false,\n   *   receiveVideo:true,\n   *   receiveAudio: true,\n   *   receiveShare: true\n   * }\n   * audioVideoOptions: {\n   *   audio: 'audioDeviceId',\n   *   video: 'videoDeviceId'\n   * }})\n   */\n  joinWithMedia(options = {}) {\n    // TODO: add validations for parameters\n    const {mediaSettings, joinOptions, audioVideoOptions} = options;\n\n    this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(mediaSettings, audioVideoOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings,\n            localShare,\n            localStream\n          }).then((mediaResponse) => {\n            Promise.resolve({\n              join: joinResponse,\n              media: mediaResponse,\n              local: [localStream, localShare]\n            });\n          })))\n      .catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * Initiates the reconnection of the media in the meeting\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect() {\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new ParameterError('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n    Trigger.trigger(\n      this,\n      {\n        file: 'meeting/index',\n        function: 'reconnect'\n      },\n      EVENT_TRIGGERS.MEETING_RECONNECTION_STARTING\n    );\n    Metrics.postEvent({event: eventType.MEDIA_RECONNECTING, meeting: this});\n\n    return this.reconnectionManager\n      .reconnect(this)\n      .then((reconnect) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS,\n          {\n            reconnect\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECOVERED,\n          meeting: this\n        });\n\n        return Promise.resolve(reconnect);\n      })\n      .catch((error) => {\n        Trigger.trigger(\n          this,\n          {\n            file: 'meeting/index',\n            function: 'reconnect'\n          },\n          EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE,\n          {\n            error: new ReconnectionError('Reconnection failure event', error)\n          }\n        );\n        Metrics.postEvent({\n          event: eventType.MEDIA_RECONNECTION_FAILED,\n          meeting: this\n        });\n\n        return Promise.reject(new ReconnectionError('Reconnection failure event', error));\n      })\n      .finally((reconnect) => {\n        this.reconnectionManager.reset();\n\n        return Promise.resolve(reconnect);\n      });\n  }\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {JoinOptions} options A configurable options object for joining a meeting\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator\n   * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator\n   *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, convoUrl, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    // If Move or PSTN try merging into one\n    if (false) {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {pstnAudioType: 'DIAL_IN'}\n      });\n    }\n    else {\n      Metrics.postEvent({\n        event: eventType.CALL_INITIATED,\n        meeting: this,\n        data: {trigger: trigger.USER_INTERACTION}\n      });\n    }\n\n    // Should PIN collection be followed by pin propt ???\n    if (options.hostPin) {\n      Metrics.pinCollection({meeting: this});\n    }\n\n    if (this.meetingFiniteStateMachine.state === MEETING_STATE_MACHINE.STATES.ENDED) {\n      this.meetingFiniteStateMachine.reset();\n    }\n    if (this.meetingFiniteStateMachine.state !== MEETING_STATE_MACHINE.STATES.RINGING) {\n      this.meetingFiniteStateMachine.ring(_JOIN_);\n    }\n\n    // TODO: does this really need to be here?\n    if (options.resourceId && this.destination && options.resourceId === this.destination) {\n      this.wirelessShare = true;\n    }\n\n    return MeetingUtil.joinMeetingOptions(this, options).then((join) => {\n      this.meetingFiniteStateMachine.join();\n\n      return Promise.resolve(join);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call to the specified resourceId\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveTo(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this, {resourceId, moveToResource: true}).then(() => {\n      this.meetingFiniteStateMachine.join();\n\n      return this.updateMedia({\n        mediaSettings: {\n          sendVideo: false, receiveVideo: false, sendAudio: false, receiveAudio: false, sendShare: false, receiveShare: false\n        }\n      }).then(() => Promise.resolve(this));\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Moves the call from the specified resourceId, back to computer\n   * @param {String} resourceId\n   * @returns {Promise} once the move has been completed\n   * @public\n   * @memberof Meeting\n   */\n  moveFrom(resourceId) {\n    if (!resourceId) {\n      throw new ParameterError('Cannot move call without a resourceId.');\n    }\n    const oldCorrelationId = this.correlationId;\n\n    this.id = uuid.v4();\n\n    this.webex.meetings.meetingCollection.set(this);\n\n    Metrics.mediaCapabilities({\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          },\n          tx: {\n            audio: true,\n            share: true,\n            share_audio: true,\n            video: true,\n            whiteboard: true\n          }\n        }\n      }\n    });\n    Metrics.moveMedia({meeting: this});\n\n    return MeetingUtil.joinMeetingOptions(this).then((join) => this.getMediaStreams({sendAudio: true, sendVideo: true, sendShare: false})\n      .then(([localStream, localShare]) =>\n        this.updateMedia({\n          mediaSettings: {\n            sendAudio: true, receiveAudio: true, sendVideo: true, receiveVideo: true, sendShare: false, receiveShare: false\n          },\n          localStream,\n          localShare\n        })\n          .then(() => Promise.resolve(join)))\n      .then(() => MeetingUtil.leaveMeeting(this, {resourceId, correlationId: oldCorrelationId, moveMeeting: true})))\n      .then(() => {\n        this.webex.meetings.meetingCollection.delete(oldCorrelationId);\n\n        return Promise.resolve();\n      });\n  }\n\n  /**\n   * Get local media streams based on options passed\n   * @param {MediaDirection} mediaDirection A configurable options object for joining a meeting\n   * @param {AudioVideo} [audioVideo] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @param {SharePreferences} [sharePreferences] audio/video object to set audioinput and videoinput devices, see #Media.getUserMedia\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static, or moved so can be called outside of a meeting\n   * @memberof Meeting\n   */\n  getMediaStreams = (mediaDirection, audioVideo = {}, sharePreferences) => {\n    if (mediaDirection && (mediaDirection.sendAudio || mediaDirection.sendVideo || mediaDirection.sendShare)) {\n      return Media.getUserMedia(mediaDirection, audioVideo, sharePreferences)\n        .then((response) => {\n          if (!response[0] && !response[1]) {\n            return Promise.reject(new MediaError('Was not able to retrive media Stream'));\n          }\n\n          return Promise.resolve(response);\n        });\n    }\n\n    return Promise.reject(new MediaError('Atleaset one of the mediaDirection value should be true'));\n  }\n\n  /**\n   * Get the devices from the Media module\n   * @returns {Promise} resolves to an array of DeviceInfo\n   * @memberof Meetings\n   */\n  getDevices = () => Media.getDevices();\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaDirection} options.mediaSettings pass media options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    if (MeetingUtil.isGuestUnjoined(this.locusInfo) && !this.wirelessShare) {\n      return Promise.reject(new MediaError(`To add media, the ${this.guest ? 'guest' : ''} user must be ${this.guest ? 'admitted. Wait to be admitted' : 'joined to the meeting'} to call addMedia`));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    Metrics.postEvent({\n      event: eventType.MEDIA_CAPABILITIES,\n      meeting: this,\n      data: {\n        mediaCapabilities: {\n          rx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          },\n          tx: {\n            audio: false,\n            share: false,\n            share_audio: false,\n            video: false,\n            whiteboard: false\n          }\n        }\n      }\n    });\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => {\n        MeetingUtil.setPeerConnectionEvents(this);\n\n        return this.preMedia(localStream, localShare, mediaSettings);\n      })\n      .then(() => Media.attachMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->addMedia#PeerConnection Received from attachMedia ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          MeetingUtil.startInternalStats(this);\n        })\n        .catch((err) => {\n          this.logger.error('Meeting:index#join --> Error joining the call on roap initialization, ', err);\n          throw err;\n        })\n        .then(() => new Promise((resolve, reject) => {\n          let timerCount = 0;\n\n          // eslint-disable-next-line func-names\n          // eslint-disable-next-line prefer-arrow-callback\n          if (this.type === _CALL_) {\n            resolve();\n          }\n          const joiningTimer = setInterval(() => {\n            timerCount += 1;\n            if (this.meetingState === FULL_STATE.ACTIVE) {\n              clearInterval(joiningTimer);\n              resolve();\n            }\n\n            if (timerCount === 4) {\n              clearInterval(joiningTimer);\n              reject(new Error('Meeting is still not active '));\n            }\n          }, 1000);\n        }))\n        .then(() => this.roap\n          .sendRoapMediaRequest({\n            sdp: this.mediaProperties.peerConnection.sdp,\n            roapSeq: this.roapSeq,\n            meeting: this // or can pass meeting ID\n          })\n          .catch((err) => {\n            this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);\n            throw err;\n          }))\n\n        .then(() => {\n          if (mediaSettings && mediaSettings.sendShare && localShare) {\n            if (this.state === MEETING_STATE.STATES.JOINED) {\n              return this.share();\n            }\n\n            // When the self state changes to JOINED then request the floor\n            this.floorGrantPending = true;\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Informs if the peer connection is in a state that can be updated with updateMedia (audio/video/share)\n   * @returns {Boolean}\n   */\n  canUpdateMedia() {\n    return this.mediaProperties.peerConnection.signalingState === SDP.STABLE;\n  }\n\n  /**\n   * A confluence of updateAudio, updateVideo, and updateShare\n   * this function re-establishes all of the media streams with new options\n   * @param {Object} options\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @param {MediaDirection} options.mediaSettings\n   * @returns {Promise}\n   * @todo fix setRemoteStream for updateMedia\n   * @public\n   * @memberof Meeting\n   */\n  updateMedia(options = {}) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {localStream, localShare, mediaSettings} = options;\n\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions(options)\n      .then(() => this.preMedia(localStream, localShare, mediaSettings))\n      .then(() => Media.updateMedia(this.mediaProperties, this.id)\n        .then((peerConnection) => {\n          LoggerProxy.logger.log(`Meeting:index->updateMedia#PeerConnection received from updateMedia, ${peerConnection}`);\n          this.setRemoteStream(peerConnection);\n          if (mediaSettings.receiveShare || localShare) {\n            PeerConnectionManager.setContentSlides(peerConnection);\n          }\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updatedMedia, ', err);\n          throw err;\n        })\n        .then(() =>\n          this.roap\n            .sendRoapMediaRequest({\n              sdp: this.mediaProperties.peerConnection.sdp,\n              roapSeq: this.roapSeq,\n              meeting: this // or can pass meeting ID\n            })\n            .catch((err) => {\n              LoggerProxy.logger.error('Meeting:index#updateMedia --> Error updateMedia on send roap media request, ', err);\n              throw err;\n            }))\n        .then(() => this.checkForStopShare(mediaSettings.sendShare, previousSendShareStatus))\n        .then((startShare) => {\n          // This is a special case if we do an /floor grant followed by /media\n          // we actually get a OFFER from the server and a GLAR condition happens\n          if (startShare) {\n            // We are assuming that the clients are connected when doing an update\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }));\n  }\n\n  /**\n   * Update the main audio streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendAudio\n   * @param {boolean} options.receiveAudio\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateAudio(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendAudio, receiveAudio, stream} = options;\n    const {audioTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).audioTrack;\n\n    if (typeof sendAudio !== 'boolean' || typeof receiveAudio !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendAudio, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver(\n        {\n          type: 'audio',\n          sendTrack: options.sendAudio,\n          receiveTrack: options.receiveAudio,\n          track,\n          transceiver: audioTransceiver,\n          peerConnection: this.mediaProperties.peerConnection,\n          previousMediaDirection: {\n            sendTrack: this.mediaProperties.mediaDirection.sendAudio,\n            receiveTrack: this.mediaProperties.mediaDirection.receiveAudio\n          }\n        },\n        {\n          mediaProperties: this.mediaProperties,\n          roapSeq: this.roapSeq,\n          meeting: this,\n          id: this.id\n        }\n      ))\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendAudio = sendAudio;\n        this.mediaProperties.mediaDirection.receiveAudio = receiveAudio;\n      });\n  }\n\n  /**\n   * Update the main video streams with new parameters\n   * @param {Object} options\n   * @param {boolean} options.sendVideo\n   * @param {boolean} options.receiveVideo\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateVideo(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendVideo, receiveVideo, stream} = options;\n    const {videoTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendVideo !== 'boolean' || typeof receiveVideo !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendVideo and receiveVideo parameter'));\n    }\n\n    return MeetingUtil.validateOptions({sendVideo, localStream: stream})\n      .then(() => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: options.sendVideo,\n        receiveTrack: options.receiveVideo,\n        track,\n        transceiver: videoTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendVideo,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveVideo\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      }))\n      .then(() => {\n        this.setLocalTracks(stream);\n        this.mediaProperties.mediaDirection.sendVideo = sendVideo;\n        this.mediaProperties.mediaDirection.receiveVideo = receiveVideo;\n      });\n  }\n\n  /**\n   * Internal function when stopping a share stream, cleanup\n   * @param {boolean} sendShare\n   * @param {boolean} previousShareStatus\n   * @returns {Promise}\n   * @private\n   * @memberof Meeting\n   */\n  checkForStopShare(sendShare, previousShareStatus) {\n    if (!this.isSharing && sendShare &&\n      !previousShareStatus) {\n      // When user starts sharing\n      // return this.share();\n      return Promise.resolve(true);\n    }\n    if (this.isSharing && !sendShare &&\n      previousShareStatus) {\n      // When user stops sharing\n      return this.stopShare()\n        .then(() => Promise.resolve(false));\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update the share streams, can be used to start sharing\n   * @param {Object} options\n   * @param {boolean} options.sendShare\n   * @param {boolean} options.receiveShare\n   * @param {MediaStream} [stream]\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  updateShare(options) {\n    if (!this.canUpdateMedia()) {\n      return Promise.reject(new MediaError('The peer connection is currently negotiation an offer. Please wait for a few seconds and try again.'));\n    }\n    const {sendShare, receiveShare, stream} = options;\n    const {shareTransceiver} = this.mediaProperties.peerConnection;\n    const track = MeetingUtil.getTrack(stream).videoTrack;\n\n    if (typeof sendShare !== 'boolean' || typeof receiveShare !== 'boolean') {\n      return Promise.reject(new ParameterError('Pass sendShare and receiveShare parameter'));\n    }\n    const previousSendShareStatus = this.mediaProperties.mediaDirection.sendShare;\n\n    return MeetingUtil.validateOptions({sendShare, localShare: stream})\n      .then(() => this.checkForStopShare(sendShare, previousSendShareStatus))\n      .then((startShare) => MeetingUtil.updateTransceiver({\n        type: 'video',\n        sendTrack: sendShare,\n        receiveTrack: receiveShare,\n        track,\n        transceiver: shareTransceiver,\n        peerConnection: this.mediaProperties.peerConnection,\n        previousMediaDirection: {\n          sendTrack: this.mediaProperties.mediaDirection.sendShare,\n          receiveTrack: this.mediaProperties.mediaDirection.receiveShare\n        }\n      },\n      {\n        mediaProperties: this.mediaProperties,\n        roapSeq: this.roapSeq,\n        meeting: this,\n        id: this.id\n      })\n        .then(() => {\n          if (startShare) {\n            return this.share();\n          }\n\n          return Promise.resolve();\n        }))\n      .then(() => {\n        this.setLocalShareTrack(stream);\n        this.mediaProperties.mediaDirection.sendShare = sendShare;\n        this.mediaProperties.mediaDirection.receiveShare = receiveShare;\n      });\n  }\n\n  /**\n   * Do all the attach media pre set up before executing the actual attach\n   * @param {MediaStream} localStream\n   * @param {MediaStream} localShare\n   * @param {MediaDirection} mediaSettings\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  preMedia(localStream, localShare, mediaSettings) {\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // Validation is already done in addMedia so no need to check if the lenght is greater then 0\n    this.setLocalTracks(localStream);\n    this.setLocalShareTrack(localShare);\n  }\n\n  /**\n   * Acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type) {\n    if (!type) {\n      return Promise.reject(new ParameterError('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === _INCOMING_) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.meetingFiniteStateMachine.ring(type);\n          Metrics.postEvent({event: eventType.ALERT_DISPLAYED, meeting: this});\n\n          return Promise.resolve({\n            response\n          });\n        });\n    }\n\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = _BUSY_) {\n    return MeetingUtil.declineMeeting(this, reason).then((decline) => {\n      this.meetingFiniteStateMachine.decline();\n\n      return Promise.resolve(decline);\n    }).catch((error) => {\n      this.meetingFiniteStateMachine.fail(error);\n\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options An object of options\n   * @param {Boolean} options.keepLocalMedia Whether to tear down the local media connections or not.\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave(options = {}) {\n    Metrics.postEvent({event: eventType.LEAVE, meeting: this, data: {trigger: trigger.USER_INTERACTION, canProceed: false}});\n\n    return MeetingUtil.leaveMeeting(this, options)\n      .then((leave) => {\n        this.meetingFiniteStateMachine.leave();\n        // TODO: more testing before we remove this code, we are not sure the scenarios for destroy here\n        if (this.wirelessShare || this.guest) {\n          // If screen sharing clean the meeting object\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'leave'\n            },\n            EVENTS.DESTROY_MEETING,\n            {\n              meetingId: this.id\n            }\n          );\n        }\n\n        return Promise.resolve(leave);\n      }).catch((error) => {\n        this.meetingFiniteStateMachine.fail(error);\n\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * Start sharing content with server\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @private\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && !this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_INITIATED, meeting: this});\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .then(() => {\n          this.isSharing = true;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'share'\n            },\n            EVENT_TRIGGERS.MEETING_STARTED_SHARING_LOCAL,\n          );\n          Metrics.postEvent({event: eventType.LOCAL_SHARE_FLOOR_GRANTED, meeting: this});\n\n          return Promise.resolve();\n        })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->share#Error ', e);\n\n          return Promise.reject(e);\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot share without content.'));\n  }\n\n  /**\n   * Stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n\n    if (content && this.isSharing) {\n      Metrics.postEvent({event: eventType.SHARE_STOPPED, meeting: this});\n      Media.stopTracks(this.mediaProperties.shareTrack);\n\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      })\n        .catch((e) => {\n          LoggerProxy.logger.error('Meeting/index->stopShare#Error ', e);\n\n          return Promise.reject(e);\n        })\n        .finally(() => {\n          this.isSharing = false;\n          Trigger.trigger(\n            this,\n            {\n              file: 'meeting/index',\n              function: 'stopShare'\n            },\n            EVENT_TRIGGERS.MEETING_STOPPED_SHARING_LOCAL,\n          );\n        });\n    }\n\n    return Promise.reject(new ParameterError('Cannot stop share without content'));\n  }\n\n  /**\n   * Intiate a recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  startRecording() {\n    return MeetingUtil.startRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * End the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  stopRecording() {\n    return MeetingUtil.stopRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Pauses the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  pauseRecording() {\n    return MeetingUtil.pauseRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Resumes the recording of this meeting\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  resumeRecording() {\n    return MeetingUtil.resumeRecording(this.meetingRequest, this.locusUrl, this.locusInfo);\n  }\n\n  /**\n   * Locks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  lockMeeting() {\n    return MeetingUtil.lockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n\n  /**\n   * Unlocks the current meeting if possible\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  unlockMeeting() {\n    return MeetingUtil.unlockMeeting(this.inMeetingActions, this.meetingRequest, this.locusUrl);\n  }\n}\n"]}