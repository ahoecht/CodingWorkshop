{"version":3,"sources":["util.js"],"names":["RoapUtil","ROAP_ANSWER","_ANSWER_","toLowerCase","shouldHandleMedia","meeting","offer","mediaProperties","peerConnection","signalingState","SDP","HAVE_LOCAL_OFFER","handleError","pc","PeerConnectionManager","rollBackLocalDescription","then","resolve","catch","err","reject","findError","messageType","errorType","type","ROAP","RECEIVE_ROAP_MSG","SEND_ROAP_MSG","_ERROR_","_CONFLICT_","ensureMeeting","SEND_ROAP_MSG_SUCCESS","compareLastRemoteOffer","currentOffer","previousOffer","index1","index2","difference","length","forEach","sdp","index","indexOf","_IN_","substring","updatePeerConnection","session","res","OFFER","sdps","roap","lastRoapOffer","sdpPromises","LoggerProxy","logger","info","push","offerSdp","id","setRemoteDescription","correlationId","error","ParameterError","setRemoteSessionDetails","ANSWER","seq","locusId","locusSelfId","locusInfo","self","mediaId"],"mappings":"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","file":"util.js","sourcesContent":["import PeerConnectionManager from '../peer-connection-manager';\nimport {\n  _ANSWER_,\n  _ERROR_,\n  _CONFLICT_,\n  ROAP,\n  SDP,\n  _IN_\n} from '../constants';\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport ParameterError from '../common/errors/parameter';\n\nconst RoapUtil = {};\nconst ROAP_ANSWER = _ANSWER_.toLowerCase();\n\nRoapUtil.shouldHandleMedia = (meeting) => {\n  const offer =\n    meeting.mediaProperties.peerConnection &&\n    meeting.mediaProperties.peerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;\n\n  if (offer) {\n    return false;\n  }\n\n  return true;\n};\n\nRoapUtil.handleError = (pc) =>\n  PeerConnectionManager.rollBackLocalDescription({peerConnection: pc})\n    .then(() => Promise.resolve(true))\n    .catch((err) => Promise.reject(err));\n\nRoapUtil.findError = (messageType, errorType, type) =>\n  (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG) && messageType === _ERROR_ && errorType === _CONFLICT_;\n\nRoapUtil.ensureMeeting = (meeting, type) => {\n  if (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG || type === ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nRoapUtil.compareLastRemoteOffer = (currentOffer, previousOffer) => {\n  let index1, index2;\n  let difference = false;\n\n  // TODO: fix roap issue where chrome cannot create offer after replaceTrack and createOffer\n  if (previousOffer.length > 0 && previousOffer.length === currentOffer.length) {\n    previousOffer.forEach((sdp, index) => {\n      index1 = sdp.indexOf(_IN_);\n      index2 = currentOffer[index].indexOf(_IN_);\n      if (sdp.substring(index1) !== currentOffer[index].substring(index2)) {\n        difference = true;\n      }\n    });\n\n    // return difference;\n  }\n\n  return difference;\n};\n\nRoapUtil.updatePeerConnection = (meeting, session) => {\n  const res = RoapUtil.compareLastRemoteOffer(session.OFFER.sdps, meeting.roap.lastRoapOffer);\n\n  if (!res) {\n    const sdpPromises = [];\n\n    LoggerProxy.logger.info('Meeting/RoapUtil: Previous Roap Offer is same as current offer');\n    if (meeting.mediaProperties.peerConnection) {\n      sdpPromises.push(meeting.mediaProperties.peerConnection.sdp);\n    }\n\n    return Promise.resolve(sdpPromises);\n  }\n\n  return PeerConnectionManager.updatePeerConnection({\n    offerSdp: session.OFFER.sdps,\n    peerConnection: meeting.mediaProperties.peerConnection\n  },\n  meeting.id)\n    .then((res) => {\n      meeting.roap.lastRoapOffer = session.OFFER.sdps;\n\n      return res;\n    });\n};\n\n\nRoapUtil.setRemoteDescription = (meeting, session) => {\n  LoggerProxy.logger.info(`RoapUtil->setRemoteDescription#Transmit WAIT_TX_OK, correlationId: ${meeting.correlationId}`);\n  if (!(meeting && (meeting.mediaProperties.peerConnection))) {\n    LoggerProxy.logger.error(`RoapUtil->setRemoteDescription#DANGER no media or screen peer connection, correlationId: ${meeting.correlationId}`);\n\n    return Promise.reject(new ParameterError('Must provide a media or screen peer connection'));\n  }\n\n  return PeerConnectionManager.setRemoteSessionDetails(\n    meeting.mediaProperties.peerConnection,\n    ROAP_ANSWER,\n    session.ANSWER.sdps[0],\n    meeting.id\n  ).then(() => {\n    LoggerProxy.logger.info(`RoapUtil->setRemoteDescription#Success for correlationId: ${meeting.correlationId}`);\n\n    return {\n      seq: session.ANSWER.seq,\n      locusId: meeting.locusId,\n      locusSelfId: meeting.locusInfo.self.id,\n      mediaId: meeting.mediaId,\n      correlationId: meeting.correlationId\n    };\n  })\n    .catch((err) => {\n      throw err;\n    });\n};\n\nexport default RoapUtil;\n"]}