{"version":3,"sources":["index.js"],"names":["default","Search","config","payloadTransformer","predicates","name","direction","test","ctx","options","resolve","webex","internal","device","isSpecificService","service","url","extract","body","response","then","res","uri","activities","items","transforms","fn","object","encryption","encryptText","searchEncryptionKeyUrl","query","q"],"mappings":";;;;;;;;;;;;;;;AAKA;;;;;2CAuDQA,O;;;;AAxDR;;;;AAEA;;;;AAGA;;;;AATA;;;;AAWA,uCAAuB,QAAvB,EAAiCC,gBAAjC,EAAyC;AACvCC,0BADuC;AAEvCC,sBAAoB;AAClBC,gBAAY,CACV;AACEC,YAAM,oBADR;AAEEC,iBAAW,UAFb;AAGEC,UAHF,gBAGOC,GAHP,EAGYC,OAHZ,EAGqB;AACjB,YAAI,CAAC,mBAAIA,OAAJ,EAAa,YAAb,CAAL,EAAiC;AAC/B,iBAAO,kBAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,YAAI,CAAC,mBAAID,OAAJ,EAAa,6BAAb,CAAL,EAAkD;AAChD,iBAAO,kBAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,eAAOF,IAAIG,KAAJ,CAAUC,QAAV,CAAmBC,MAAnB,CAA0BC,iBAA1B,CAA4C,UAA5C,EAAwDL,QAAQM,OAAR,IAAmBN,QAAQO,GAAnF,CAAP;AACD,OAbH;AAcEC,aAdF,mBAcUR,OAdV,EAcmB;AACf,eAAO,kBAAQC,OAAR,CAAgBD,QAAQS,IAAxB,CAAP;AACD;AAhBH,KADU,EAmBV;AACEb,YAAM,sBADR;AAEEC,iBAAW,SAFb;AAGEC,UAHF,gBAGOC,GAHP,EAGYW,QAHZ,EAGsB;AAClB,eAAO,kBAAQT,OAAR,CAAgB,mBAAIS,QAAJ,EAAc,qCAAd,CAAhB,EACJC,IADI,CACC,UAACC,GAAD;AAAA,iBAASA,OAAOb,IAAIG,KAAJ,CAAUC,QAAV,CAAmBC,MAAnB,CAA0BC,iBAA1B,CAA4C,UAA5C,EAAwDK,SAASV,OAAT,CAAiBM,OAAjB,IAA4BI,SAASV,OAAT,CAAiBa,GAArG,CAAhB;AAAA,SADD,CAAP;AAED,OANH;AAOEL,aAPF,mBAOUE,QAPV,EAOoB;AAChB,eAAO,kBAAQT,OAAR,CAAgBS,SAASD,IAAT,CAAcK,UAAd,CAAyBC,KAAzC,CAAP;AACD;AATH,KAnBU,CADM;AAgClBC,gBAAY,CACV;AACEpB,YAAM,oBADR;AAEEC,iBAAW,UAFb;AAGEoB,QAHF,cAGKlB,GAHL,EAGUmB,MAHV,EAGkB;AACd,eAAOnB,IAAIG,KAAJ,CAAUC,QAAV,CAAmBgB,UAAnB,CAA8BC,WAA9B,CAA0CF,OAAOG,sBAAjD,EAAyEH,OAAOI,KAAhF,EACJX,IADI,CACC,UAACY,CAAD,EAAO;AACXL,iBAAOI,KAAP,GAAeC,CAAf;AACD,SAHI,CAAP;AAID;AARH,KADU;AAhCM;AAFmB,CAAzC","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport Search from './search';\nimport config from './config';\nimport {has} from 'lodash';\n\nimport '@webex/internal-plugin-encryption';\n\nregisterInternalPlugin('search', Search, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        test(ctx, options) {\n          if (!has(options, 'body.query')) {\n            return Promise.resolve(false);\n          }\n\n          if (!has(options, 'body.searchEncryptionKeyUrl')) {\n            return Promise.resolve(false);\n          }\n\n          return ctx.webex.internal.device.isSpecificService('argonaut', options.service || options.url);\n        },\n        extract(options) {\n          return Promise.resolve(options.body);\n        }\n      },\n      {\n        name: 'transformObjectArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.activities.items[0].objectType'))\n            .then((res) => res && ctx.webex.internal.device.isSpecificService('argonaut', response.options.service || response.options.uri));\n        },\n        extract(response) {\n          return Promise.resolve(response.body.activities.items);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        fn(ctx, object) {\n          return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query)\n            .then((q) => {\n              object.query = q;\n            });\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './search';\n"]}