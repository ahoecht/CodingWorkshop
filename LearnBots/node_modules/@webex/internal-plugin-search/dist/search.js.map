{"version":3,"sources":["search.js"],"names":["Search","WebexPlugin","extend","namespace","people","options","queryString","query","reject","Error","request","api","resource","method","body","then","res","bindSearchKey","webex","internal","encryption","kms","createUnboundKeys","count","key","createResource","userIds","device","userId","set","uri","search","promise","resolve","searchEncryptionKeyUrl","service","resActivities","breadcrumbsEnabled","activities","breadcrumbs","oneFlight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAAA;;;;AAKA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAASC,uBAAYC,MAAZ,SAAmB;AAChCC,aAAW,QADqB;;AAGhCC,QAHgC,kBAGzBC,OAHyB,EAGhB;AACdA,cAAUA,WAAW,EAArB;;AAEA,QAAI,CAACA,QAAQC,WAAT,IAAwBD,QAAQE,KAApC,EAA2C;AACzCF,cAAQC,WAAR,GAAsBD,QAAQE,KAA9B;AACA,oCAAuBF,OAAvB,EAAgC,OAAhC;AACD;;AAED,QAAI,CAACA,QAAQC,WAAb,EAA0B;AACxB,aAAO,kBAAQE,MAAR,CAAe,IAAIC,KAAJ,CAAU,6BAAV,CAAf,CAAP;AACD;;AAED,WAAO,KAAKC,OAAL,CAAa;AAClBC,WAAK,UADa;AAElBC,gBAAU,WAFQ;AAGlBC,cAAQ,MAHU;AAIlBC,YAAMT;AAJY,KAAb,EAMJU,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GAtB+B;AAyBhCG,eAzBgC,2BAyBhB;AAAA;;AACd,WAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,UAApB,CAA+BC,GAA/B,CAAmCC,iBAAnC,CAAqD,EAACC,OAAO,CAAR,EAArD,EACJR,IADI,CACC;AAAA;AAAA,UAAES,GAAF;;AAAA,aAAW,MAAKN,KAAL,CAAWC,QAAX,CAAoBC,UAApB,CAA+BC,GAA/B,CAAmCI,cAAnC,CAAkD;AACjED,gBADiE;AAEjEE,iBAAS,CAAC,MAAKR,KAAL,CAAWC,QAAX,CAAoBQ,MAApB,CAA2BC,MAA5B;AAFwD,OAAlD,EAIdb,IAJc,CAIT;AAAA,eAAM,MAAKG,KAAL,CAAWC,QAAX,CAAoBQ,MAApB,CAA2BE,GAA3B,CAA+B,wBAA/B,EAAyDL,IAAIM,GAA7D,CAAN;AAAA,OAJS,CAAX;AAAA,KADD,CAAP;AAMD,GAhC+B;AAkChCC,QAlCgC,kBAkCzB1B,OAlCyB,EAkChB;AAAA;;AACd;AACAA,cAAUA,WAAW,EAArB;;AAEA,QAAI2B,UAAU,kBAAQC,OAAR,EAAd;;AAEA,QAAI,CAAC,KAAKf,KAAL,CAAWC,QAAX,CAAoBQ,MAApB,CAA2BO,sBAAhC,EAAwD;AACtDF,gBAAU,KAAKf,aAAL,EAAV;AACD;;AAED,WAAOe,QACJjB,IADI,CACC;AAAA,aAAM,OAAKG,KAAL,CAAWR,OAAX,CAAmB;AAC7ByB,iBAAS,UADoB;AAE7BvB,kBAAU,QAFmB;AAG7BC,gBAAQ,MAHqB;AAI7BC,cAAM,sBAAcT,OAAd,EAAuB;AAC3B6B,kCAAwB,OAAKhB,KAAL,CAAWC,QAAX,CAAoBQ,MAApB,CAA2BO;AADxB,SAAvB;AAJuB,OAAnB,CAAN;AAAA,KADD,EASJnB,IATI,CASC,UAACC,GAAD,EAAS;AACb,UAAMoB,gBAAgB,mBAAIpB,GAAJ,EAAS,uBAAT,EAAkC,EAAlC,CAAtB;;AAEA,aAAQX,QAAQgC,kBAAR,GAA6B;AACnCC,oBAAYF,aADuB;AAEnCG,qBAAa,mBAAIvB,GAAJ,EAAS,kBAAT,EAA6B,EAA7B;AAFsB,OAA7B,GAGJoB,aAHJ;AAID,KAhBI,CAAP;AAiBD,GA7D+B;AAAA;AAAA,CAAnB,qDAwBZI,iBAxBY,iFAAf;;kBAiEexC,M","file":"search.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\nimport {oneFlight} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\n\nconst Search = WebexPlugin.extend({\n  namespace: 'Search',\n\n  people(options) {\n    options = options || {};\n\n    if (!options.queryString && options.query) {\n      options.queryString = options.query;\n      Reflect.deleteProperty(options, 'query');\n    }\n\n    if (!options.queryString) {\n      return Promise.reject(new Error('`options.query` is required'));\n    }\n\n    return this.request({\n      api: 'argonaut',\n      resource: 'directory',\n      method: 'POST',\n      body: options\n    })\n      .then((res) => res.body);\n  },\n\n  @oneFlight\n  bindSearchKey() {\n    return this.webex.internal.encryption.kms.createUnboundKeys({count: 1})\n      .then(([key]) => this.webex.internal.encryption.kms.createResource({\n        key,\n        userIds: [this.webex.internal.device.userId]\n      })\n        .then(() => this.webex.internal.device.set('searchEncryptionKeyUrl', key.uri)));\n  },\n\n  search(options) {\n    /* eslint max-nested-callbacks: [0] */\n    options = options || {};\n\n    let promise = Promise.resolve();\n\n    if (!this.webex.internal.device.searchEncryptionKeyUrl) {\n      promise = this.bindSearchKey();\n    }\n\n    return promise\n      .then(() => this.webex.request({\n        service: 'argonaut',\n        resource: 'search',\n        method: 'POST',\n        body: Object.assign(options, {\n          searchEncryptionKeyUrl: this.webex.internal.device.searchEncryptionKeyUrl\n        })\n      }))\n      .then((res) => {\n        const resActivities = get(res, 'body.activities.items', []);\n\n        return (options.breadcrumbsEnabled ? {\n          activities: resActivities,\n          breadcrumbs: get(res, 'body.breadcrumbs', {})\n        } : resActivities);\n      });\n  }\n\n});\n\nexport default Search;\n"]}