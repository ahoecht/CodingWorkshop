{"version":3,"sources":["encryption-transforms.js"],"names":["KEY","encryptTextProp","name","ctx","key","object","transform","encryptJsonProp","transforms","encryptObject","undefined","resolve","objectType","encryptConversation","conversation","webex","internal","encryption","kms","createUnboundKeys","count","then","keys","k","kmsMessage","keyUris","includes","uri","push","all","activities","items","reduce","p","activity","encryptionKeyUrl","defaultActivityEncryptionKeyUrl","encryptActivity","verb","encryptVerbActivity","maybeEncryptTarget","target","conversationUrl","url","reject","Error","get","updateKey","updateKeyActivity","kmsResourceObjectUrl","resource","logger","warn","prepareActivityKmsMessage","kro","forEach","replace","keyUrl","encryptVerbActivityWithKey","direction","fn","encryptAddActivity","alias","encryptAssignActivity","encryptCreateActivity","encryptPostActivity","encryptShareActivity","encryptCardactionActivity","encryptUpdateActivity","encryptUpdateKeyActivity","encryptComment","comment","encryptContent","content","promises","files","map","item","encryptFile","file","image","scr","encryptSubmit","submit","encryptImageURI","imageURI","encryptPropContent","encryptPropDisplayName","encryptPropInputs","encryptPropLocation","encryptPropScr","encryptScr","encryptText","ciphertext"],"mappings":"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","file":"encryption-transforms.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  capitalize,\n  curry,\n  get,\n  has,\n  isArray\n} from 'lodash';\nimport toArray from './to-array';\n\nconst KEY = Symbol('KEY');\n\nconst encryptTextProp = curry((name, ctx, key, object) => ctx.transform('encryptTextProp', name, key, object));\n\nconst encryptJsonProp = curry((name, ctx, key, object) => ctx.transform('encryptJsonProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('outbound', {\n  encryptObject(ctx, key, object) {\n    if (!object) {\n      object = key;\n      key = undefined;\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (key === false) {\n      return Promise.resolve();\n    }\n\n    return ctx.transform(`encrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  encryptConversation(ctx, key, conversation) {\n    if (key === false) {\n      return Promise.resolve();\n    }\n\n    return Promise.resolve(key || ctx.webex.internal.encryption.kms.createUnboundKeys({count: 1}))\n      .then((keys) => {\n        const k = isArray(keys) ? keys[0] : keys;\n\n        if (has(conversation, 'kmsMessage.keyUris') && !conversation.kmsMessage.keyUris.includes(k.uri)) {\n          conversation.kmsMessage.keyUris.push(k.uri);\n        }\n\n        return Promise.all([\n          // too many implicit returns on the same line is difficult to interpret\n          // eslint-disable-next-line arrow-body-style\n          has(conversation, 'activities.items') && conversation.activities.items.reduce((p, activity) => {\n            // eslint-disable-next-line max-nested-callbacks\n            return p.then(() => ctx.transform('encryptObject', k, activity));\n          }, Promise.resolve()),\n          ctx.transform('encryptPropDisplayName', k, conversation)\n        ])\n          .then(() => {\n            conversation.encryptionKeyUrl = k.uri || k;\n            // we only want to set the defaultActivityEncryptionKeyUrl if we've\n            // bound a new key\n            if (!key) {\n              conversation.defaultActivityEncryptionKeyUrl = conversation.defaultActivityEncryptionKeyUrl || k.uri || k;\n            }\n          });\n      });\n  },\n\n  encryptActivity(ctx, key, activity) {\n    // Activity is already encrypted\n    if (activity.encryptionKeyUrl) {\n      return Promise.resolve();\n    }\n\n    return ctx.transform(`encrypt${capitalize(activity.verb)}Activity`, key, activity)\n      .then(() => {\n        key = key || activity[KEY];\n\n        return ctx.transform('prepareActivityKmsMessage', key, activity);\n      });\n  },\n\n  encryptVerbActivity(ctx, key, activity) {\n    return ctx.transform('maybeEncryptTarget', key, activity)\n      .then(() => {\n        key = key || activity[KEY];\n      })\n      .then(() => ctx.transform('encryptObject', key, activity.object));\n  },\n\n  maybeEncryptTarget(ctx, key, activity) {\n    // This isn't quite right; if we just go by key, we have no guarantee that\n    // we have a proper KRO available for add activities\n    if (key) {\n      return Promise.resolve();\n    }\n\n    if (has(activity, 'target.defaultActivityEncryptionKeyUrl') && has(activity, 'target.kmsResourceObjectUrl')) {\n      activity[KEY] = key || activity.target.defaultActivityEncryptionKeyUrl;\n\n      return Promise.resolve();\n    }\n\n    const conversationUrl = activity.target && activity.target.url;\n\n    if (!conversationUrl) {\n      return Promise.reject(new Error('Cannot determine encryption key for activity\\'s conversation; no key url or conversation url provided'));\n    }\n\n    return ctx.webex.internal.conversation.get({url: conversationUrl})\n      .then((conversation) => {\n        if (!conversation.defaultActivityEncryptionKeyUrl) {\n          return ctx.webex.internal.conversation.updateKey(conversation)\n            .then((updateKeyActivity) => {\n              activity.target.kmsResourceObjectUrl = updateKeyActivity.kmsMessage.resource.uri;\n              activity[KEY] = activity.target.defaultActivityEncryptionKeyUrl = updateKeyActivity.object.defaultActivityEncryptionKeyUrl;\n            });\n        }\n\n        if (!activity.target.defaultActivityEncryptionKeyUrl) {\n          ctx.webex.logger.warn('plugin-conversation: downloaded conversation to determine its defaultActivityEncryptionKeyUrl; make sure to pass all encryption related properties when calling Webex.conversation methods.');\n        }\n\n        if (!activity.target.kmsResourceObjectUrl) {\n          ctx.webex.logger.warn('plugin-conversation: downloaded conversation to determine its kmsResourceObjectUrl; make sure to pass all encryption related properties when calling Webex.conversation methods.');\n        }\n\n        activity[KEY] = activity.target.defaultActivityEncryptionKeyUrl = conversation.defaultActivityEncryptionKeyUrl;\n        activity.target.kmsResourceObjectUrl = conversation.kmsResourceObjectUrl;\n\n        return Promise.resolve();\n      });\n  },\n\n  prepareActivityKmsMessage(ctx, key, activity) {\n    if (activity.kmsMessage) {\n      if (!key && activity.verb === 'updateKey' && has(activity, 'object.defaultActivityEncryptionKeyUrl')) {\n        key = get(activity, 'object.defaultActivityEncryptionKeyUrl');\n      }\n\n      if (!key && activity.verb === 'leave' && has(activity, 'target.defaultActivityEncryptionKeyUrl')) {\n        key = get(activity, 'target.defaultActivityEncryptionKeyUrl');\n      }\n\n      if (key) {\n        const kro = activity.target.kmsResourceObjectUrl;\n\n        ['uri', 'resourceUri'].forEach((k) => {\n          if (activity.kmsMessage[k] && !kro && activity.kmsMessage[k].includes('<KRO>')) {\n            throw new Error('encrypter: cannot determine kro');\n          }\n\n          if (activity.kmsMessage[k]) {\n            activity.kmsMessage[k] = activity.kmsMessage[k].replace('<KRO>', kro);\n            // key may be a key or a key url\n            activity.kmsMessage[k] = activity.kmsMessage[k].replace('<KEYURL>', key.keyUrl || key);\n          }\n        });\n      }\n      // If we made it this far and still don't have an encryption key, assume\n      // this is a conversation that is not encrypted and we're performing an\n      // action that should not encrypt it (e.g. `leave`)\n      else {\n        Reflect.deleteProperty(activity, 'kmsMessage');\n      }\n    }\n  },\n\n  encryptVerbActivityWithKey: {\n    direction: 'outbound',\n    fn(ctx, key, activity) {\n      return ctx.transform('encryptVerbActivity', key, activity)\n        .then(() => {\n          key = key || activity[KEY];\n          activity.encryptionKeyUrl = key.uri || key;\n        });\n    }\n  },\n\n  encryptAddActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n\n  encryptAssignActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptCreateActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n\n  encryptPostActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptShareActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptCardactionActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptUpdateActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivityWithKey'\n  },\n\n  encryptUpdateKeyActivity: {\n    direction: 'outbound',\n    alias: 'encryptVerbActivity'\n  },\n\n  encryptComment(ctx, key, comment) {\n    return Promise.all([\n      ctx.transform('encryptPropDisplayName', key, comment),\n      ctx.transform('encryptPropContent', key, comment)\n    ]);\n  },\n\n  encryptContent(ctx, key, content) {\n    const promises = content.files.items.map((item) => ctx.transform('encryptObject', key, item));\n\n    promises.push(ctx.transform('encryptPropContent', key, content));\n    promises.push(ctx.transform('encryptPropDisplayName', key, content));\n\n    return Promise.all(promises);\n  },\n\n  encryptFile(ctx, key, file) {\n    if (file.image && !file.image.scr) {\n      return Promise.reject(new Error('`file.image` must have an `scr`'));\n    }\n\n    return Promise.all([\n      ctx.transform('encryptPropScr', key, file),\n      ctx.transform('encryptPropDisplayName', key, file),\n      ctx.transform('encryptPropContent', key, file),\n      file.image && ctx.transform('encryptPropScr', key, file.image)\n    ]);\n  },\n\n  encryptSubmit(ctx, key, submit) {\n    return ctx.transform('encryptPropInputs', key, submit);\n  },\n\n  // TODO is this used for anything other than the now-removed stickies service?\n  encryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('encryptPropLocation', key, imageURI);\n  },\n\n  encryptPropContent: encryptTextProp('content'),\n\n  encryptPropDisplayName: encryptTextProp('displayName'),\n\n  encryptPropInputs: encryptJsonProp('inputs'),\n\n  encryptPropLocation: encryptTextProp('location'),\n\n  encryptPropScr(ctx, key, object) {\n    if (!object.scr) {\n      return Promise.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr;\n      });\n  },\n\n  encryptJsonProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptText(key.uri || key, JSON.stringify(object[name]))\n      .then((ciphertext) => {\n        object[name] = ciphertext;\n      });\n  },\n\n  encryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n\n    return ctx.webex.internal.encryption.encryptText(key.uri || key, object[name])\n      .then((ciphertext) => {\n        object[name] = ciphertext;\n      });\n  }\n});\n"]}