{"version":3,"sources":["decryption-transforms.js"],"names":["decryptTextProp","name","ctx","key","object","transform","transforms","decryptObject","undefined","resolve","objectType","encryptionKeyUrl","all","files","items","map","item","decryptConversation","conversation","promises","activities","push","usableKey","decryptionFailureMessage","webex","internal","config","catch","error","logger","warn","url","avatarEncryptionKeyUrl","avatar","decryptActivity","activity","keyUrl","decryptMicroappinstance","microappInstance","decryptComment","comment","cards","Array","isArray","index","decryptContent","content","contentCategory","decryptContentFiles","links","forEach","decryptContentLinks","decryptEvent","event","location","split","length","decryptFile","file","transcodedCollection","image","decryptLink","link","decryptTranscodedContent","transcodedContent","decryptImageURI","imageURI","encryption","decryptText","then","plaintext","keepEncryptedProperties","encryptedPropName","reason","decryptPropCardItem","array","String","decryptPropScr","decryptScr","scr","decryptPropSslr","sslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation"],"mappings":"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","file":"decryption-transforms.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) => ctx.transform('decryptTextProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex Teams conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(Promise.all(conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))));\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation)\n        .catch((error) => {\n          ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n          Promise.resolve(decryptionFailureMessage);\n        }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex Teams activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    return ctx.transform('decryptObject', keyUrl, activity.object);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n* Decrypts a comment...\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {String} key KMS key\n* @param {Object} comment A comment object with a displayName and content (encrypted)\n* @returns {Promise} Returns the results of Promise.all on two transforms\n*/\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment)\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) => promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) => promises.push(ctx.transform('decryptObject', key, item)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, event)\n    ];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    return Promise.all([\n      file.transcodedCollection && Promise.all(file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image)\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link)\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n* Decrypting an element in an Array.\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {Integer} index Property of an object to be decrypted\n* @param {String} key KMS key\n* @param {Array} array An array of Strings to be decrypted\n* @returns {Promise} Returns a lonely Promise\n*/\n  decryptPropCardItem(ctx, index, key, array) {\n    if (!Number.isInteger(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr)\n      .then((sslr) => {\n        object.sslr = sslr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location')\n});\n"]}