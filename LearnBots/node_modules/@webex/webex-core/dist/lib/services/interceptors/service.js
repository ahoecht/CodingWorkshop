'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _httpCore = require('@webex/http-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var trailingSlashes = /(?:^\/)|(?:\/$)/;

/**
 * @class
 */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

var ServiceInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(ServiceInterceptor, _Interceptor);

  function ServiceInterceptor() {
    (0, _classCallCheck3.default)(this, ServiceInterceptor);
    return (0, _possibleConstructorReturn3.default)(this, (ServiceInterceptor.__proto__ || (0, _getPrototypeOf2.default)(ServiceInterceptor)).apply(this, arguments));
  }

  (0, _createClass3.default)(ServiceInterceptor, [{
    key: 'onRequest',


    /* eslint-disable no-param-reassign */
    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    value: function onRequest(options) {
      var _this2 = this;

      var services = this.webex.internal.services;

      var service = void 0;

      // Populate option object's tag key.
      // A later PR will handle generating these tags at
      // request construction. These tags are used to validate
      // if a request has already been handled by a specific
      // interceptor. This is useful when multiple interceptors
      // operate on the same options object keys.
      if (!options.tags) {
        options.tags = {};
      }

      // If an operation hasn't been made via
      // this interceptor...
      if (!options.tags.serviceInterceptor) {
        options.tags.serviceInterceptor = true;

        // Some plugins are sending requests directly via the
        // `uri` key. To not conflict with the `internal-plugin-wdm`
        // interceptors, we need to check the following two key values
        // to confirm an operation needs to be made.
        if (!options.service && !options.resource) {
          return options;
        }

        service = services.get(options.service, true, options.catalog);

        if (service) {
          this.validateOptions(options);

          options.uri = this.generateUrl(service, options.resource);

          return options;
        }

        if (this.webex.credentials.canAuthorize) {
          return services.waitForCatalog('postauth', 20).then(function () {
            _this2.validateOptions(options);

            service = services.get(options.service, true, options.catalog);
            if (!service && options.uri) {
              return options;
            }

            if (!service) {
              throw new Error('`' + options.service + '` is not a known service');
            }

            options.uri = _this2.generateUrl(service, options.resource);

            return _promise2.default.resolve(options);
          }).catch(function (e) {
            return _promise2.default.reject(e);
          });
        }
      }

      return options;
    }
    /* eslint-enable no-param-reassign */

    /* eslint-disable class-methods-use-this */
    /**
     * Verify that all required parameters have been specified.
     * @param {object} options
     * @param {string} options.resource
     * @returns {void}
     */

  }, {
    key: 'validateOptions',
    value: function validateOptions(options) {
      // Validate a resource is present in the options object.
      if (!options.resource) {
        throw new Error('a `resource` parameter is required');
      }

      // Validate either uri or service is present in the options object.
      if (!options.service && !options.uri) {
        throw new Error('a valid `service` or `uri` parameter is required');
      }
    }

    /**
     * Safely generate a usable request uri string.
     * @param {string} service
     * @param {string} resource
     * @returns {boolean}
     */

  }, {
    key: 'generateUrl',
    value: function generateUrl(service, resource) {
      var formattedService = service.replace(trailingSlashes, '');
      var formattedResource = resource.replace(trailingSlashes, '');

      return formattedService + '/' + formattedResource;
    }
    /* eslint-enable class-methods-use-this */

  }], [{
    key: 'create',

    /**
     * @returns {ServiceInterceptor}
     */
    value: function create() {
      /* eslint no-invalid-this: [0] */
      return new ServiceInterceptor({ webex: this });
    }
  }]);
  return ServiceInterceptor;
}(_httpCore.Interceptor);

exports.default = ServiceInterceptor;
//# sourceMappingURL=service.js.map
