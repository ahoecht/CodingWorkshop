{"version":3,"sources":["service-url.js"],"names":["ServiceUrl","AmpState","extend","namespace","props","defaultUrl","undefined","hosts","name","_generateHostUrl","hostUri","url","Url","parse","host","port","format","_getHostUrls","map","priority","_getPriorityHostUrl","length","reduce","previous","current","homeCluster","removeHost","hostname","foundHost","find","hostObj","splice","indexOf","get","priorityHost"],"mappings":";;;;;;AAAA;;;;AAEA;;;;;;AAEA;AACA;;;AAGA,IAAMA,aAAaC,yBAASC,MAAT,CAAgB;AACjCC,aAAW,YADsB;;AAGjCC,SAAO;AACLC,gBAAY,CAAC,QAAD,EAAW,IAAX,EAAiBC,SAAjB,CADP;AAELC,WAAO,CAAC,OAAD,EAAU,KAAV,EAAiB;AAAA,aAAO,EAAP;AAAA,KAAjB,CAFF;AAGLC,UAAM,CAAC,QAAD,EAAW,IAAX,EAAiBF,SAAjB;AAHD,GAH0B;;AASjC;;;;;;AAMAG,kBAfiC,4BAehBC,OAfgB,EAeP;AACxB,QAAMC,MAAMC,cAAIC,KAAJ,CAAU,KAAKR,UAAf,CAAZ;;AAEA;AACA;AACAM,QAAIG,IAAJ,QAAcJ,OAAd,IAAwBC,IAAII,IAAJ,SAAeJ,IAAII,IAAnB,GAA4B,EAApD;;AAEA,WAAOH,cAAII,MAAJ,CAAWL,GAAX,CAAP;AACD,GAvBgC;;;AAyBjC;;;;;AAKAM,cA9BiC,0BA8BlB;AAAA;;AACb,WAAO,KAAKV,KAAL,CAAWW,GAAX,CAAe,UAACJ,IAAD;AAAA,aAAW;AAC/BH,aAAK,MAAKF,gBAAL,CAAsBK,KAAKA,IAA3B,CAD0B;AAE/BK,kBAAUL,KAAKK;AAFgB,OAAX;AAAA,KAAf,CAAP;AAID,GAnCgC;;;AAqCjC;;;;;AAKAC,qBA1CiC,iCA0CX;AACpB,QAAI,KAAKb,KAAL,CAAWc,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAO,KAAKhB,UAAZ;AACD;;AAED,WAAO,KAAKI,gBAAL,CAAsB,KAAKF,KAAL,CAAWe,MAAX,CAAkB,UAACC,QAAD,EAAWC,OAAX;AAAA,aAC5CD,SAASJ,QAAT,GAAoBK,QAAQL,QAA5B,IAAwC,CAACI,SAASE,WAAnD,GACED,OADF,GACYD,QAFiC;AAAA,KAAlB,EAG1BT,IAHI,CAAP;AAID,GAnDgC;;;AAqDjC;;;;;;;;;AASAY,YA9DiC,sBA8DtBf,GA9DsB,EA8DjB;AACd,QAAIA,QAAQ,KAAKN,UAAjB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAHa,qBAKKO,cAAIC,KAAJ,CAAUF,GAAV,CALL;AAAA,QAKPgB,QALO,cAKPA,QALO;;AAMd,QAAMC,YAAY,KAAKrB,KAAL,CAAWsB,IAAX,CAAgB,UAACC,OAAD;AAAA,aAAaA,QAAQhB,IAAR,KAAiBa,QAA9B;AAAA,KAAhB,CAAlB;;AAEA,SAAKpB,KAAL,CAAWwB,MAAX,CAAkB,KAAKxB,KAAL,CAAWyB,OAAX,CAAmBJ,SAAnB,CAAlB,EAAiD,CAAjD;;AAEA,WAAQA,cAActB,SAAtB;AACD,GAzEgC;;;AA2EjC;;;;;;AAMA2B,KAjFiC,eAiF7BC,YAjF6B,EAiFf;AAChB,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAO,KAAK7B,UAAZ;AACD;;AAED,WAAO,KAAKe,mBAAL,EAAP;AACD;AAvFgC,CAAhB,CAAnB;AAyFA;;kBAEepB,U","file":"service-url.js","sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceUrl = AmpState.extend({\n  namespace: 'ServiceUrl',\n\n  props: {\n    defaultUrl: ['string', true, undefined],\n    hosts: ['array', false, () => ([])],\n    name: ['string', true, undefined]\n  },\n\n  /**\n   * Generate a host url based on the host\n   * uri provided.\n   * @param {string} hostUri\n   * @returns {string}\n   */\n  _generateHostUrl(hostUri) {\n    const url = Url.parse(this.defaultUrl);\n\n    // setting url.hostname will not apply during Url.format(), set host via\n    // a string literal instead.\n    url.host = `${hostUri}${url.port ? `:${url.port}` : ''}`;\n\n    return Url.format(url);\n  },\n\n  /**\n   * Generate a list of urls based on this\n   * `ServiceUrl`'s known hosts.\n   * @returns {string[]}\n   */\n  _getHostUrls() {\n    return this.hosts.map((host) => ({\n      url: this._generateHostUrl(host.host),\n      priority: host.priority\n    }));\n  },\n\n  /**\n   * Get the current host url with the highest\n   * priority.\n   * @returns {string}\n   */\n  _getPriorityHostUrl() {\n    if (this.hosts.length === 0) {\n      return this.defaultUrl;\n    }\n\n    return this._generateHostUrl(this.hosts.reduce((previous, current) => (\n      (previous.priority > current.priority || !previous.homeCluster) ?\n        current : previous\n    )).host);\n  },\n\n  /**\n   * Attempt to remove a host from this `ServiceUrl`\n   * and return true if the provided `url` had a host\n   * that could be successfully removed or if the url\n   * is assocaited with a defaultUrl, and cannot be\n   * removed.\n   * @param {string} url\n   * @returns {boolean}\n   */\n  removeHost(url) {\n    if (url === this.defaultUrl) {\n      return true;\n    }\n\n    const {hostname} = Url.parse(url);\n    const foundHost = this.hosts.find((hostObj) => hostObj.host === hostname);\n\n    this.hosts.splice(this.hosts.indexOf(foundHost), 1);\n\n    return (foundHost !== undefined);\n  },\n\n  /**\n   * Get the current `defaultUrl` or generate a url\n   * using the host with the highest priority via host rendering.\n   * @param {boolean} [priorityHost]\n   * @returns {string}\n   */\n  get(priorityHost) {\n    if (!priorityHost) {\n      return this.defaultUrl;\n    }\n\n    return this._getPriorityHostUrl();\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceUrl;\n"]}