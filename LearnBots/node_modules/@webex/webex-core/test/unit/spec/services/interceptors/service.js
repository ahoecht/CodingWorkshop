/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */
import {assert} from '@webex/test-helper-chai';
import {ServiceInterceptor} from
  '@webex/webex-core';

describe('webex-core', () => {
  describe('ServiceInterceptor', () => {
    let interceptor;
    let options;

    beforeEach(() => {
      interceptor = new ServiceInterceptor();
      options = {
        resource: 'resource/item',
        service: 'https://example.com/api/v1',
        uri: 'https://example-2.com/api/v1/resource/uri'
      };
    });

    describe('#validateOptions()', () => {
      it('throws an error if no resource is specified', () => {
        delete options.resource;

        const fn = () => { interceptor.validateOptions(options); };

        assert.throws(fn, Error);
      });

      it('throws an error if no service and uri are specified', () => {
        delete options.service;
        delete options.uri;

        const fn = () => { interceptor.validateOptions(options); };

        assert.throws(fn, Error);
      });

      it('doesn\'t throw if only resource and uri are specified', () => {
        delete options.service;

        const fn = () => { interceptor.validateOptions(options); };

        assert.doesNotThrow(fn, Error);
      });

      it('doesn\'t throw if only resource and service are specified', () => {
        delete options.uri;

        const fn = () => { interceptor.validateOptions(options); };

        assert.doesNotThrow(fn, Error);
      });

      it('returns void on success', () => {
        assert.typeOf(interceptor.validateOptions(options), 'undefined');
      });
    });

    describe('#generateUrl()', () => {
      it('returns a string', () => {
        const {service, resource} = options;

        assert.typeOf(interceptor.generateUrl(service, resource), 'string');
      });

      it('combines a service and resource string into a url', () => {
        const {service, resource} = options;
        const pattern = /(?:^\/)|(?:\/$)/;

        assert.equal(interceptor.generateUrl(service, resource),
          `${service.replace(pattern, '')}/${resource.replace(pattern, '')}`);
      });
    });
  });
});
