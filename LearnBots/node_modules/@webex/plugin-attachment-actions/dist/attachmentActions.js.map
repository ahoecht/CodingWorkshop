{"version":3,"sources":["attachmentActions.js"],"names":["AttachmentActions","WebexPlugin","extend","initialize","args","prototype","create","attachmentAction","request","method","service","resource","body","then","res","get","id","items"],"mappings":";;;;;;;;;;AAIA;;;;AAIA;;;;;;;;;;;AAWA,IAAMA,oBAAoBC,uBAAYC,MAAZ,CAAmB;AAC3C;;;;;;;;AAQAC,YAT2C,wBASvB;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AAClB,yBAAcH,uBAAYI,SAAZ,CAAsBF,UAApC,EAAgD,IAAhD,EAAsDC,IAAtD;AACD,GAX0C;;;AAa3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEAE,QA9E2C,kBA8EpCC,gBA9EoC,EA8ElB;AACvB,WAAO,KAAKC,OAAL,CAAa;AAClBC,cAAQ,MADU;AAElBC,eAAS,OAFS;AAGlBC,gBAAU,oBAHQ;AAIlBC,YAAML;AAJY,KAAb,EAMJM,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAb;AAAA,KAND,CAAP;AAOD,GAtF0C;;;AAwF3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DAG,KAtJ2C,eAsJvCR,gBAtJuC,EAsJrB;AACpB,QAAMS,KAAKT,iBAAiBS,EAAjB,IAAuBT,gBAAlC;;AAEA,WAAO,KAAKC,OAAL,CAAa;AAClBE,eAAS,OADS;AAElBC,wCAAgCK;AAFd,KAAb,EAIJH,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,IAAIF,IAAJ,CAASK,KAAT,IAAkBH,IAAIF,IAA/B;AAAA,KAJD,CAAP;AAKD,GA9J0C;AAAA;AAAA,CAAnB,CAA1B,C,CAnBA;;;;kBAoLeZ,iB","file":"attachmentActions.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  WebexPlugin\n} from '@webex/webex-core';\n\n/**\n * @typedef {Object} AttachmentActionObject\n * @property {string} id - (server generated) Unique identifier for the attachment action\n * @property {string} messageId - The ID of the message in which attachment action is to be performed\n * @property {string} type - The type of attachment action eg., submit\n * @property {Object} inputs - The inputs for form fields in attachment message\n * @property {string} personId - (server generated) The ID for the author of the attachment action\n * @property {string} roomId - (server generated) The ID for the room of the message\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\nconst AttachmentActions = WebexPlugin.extend({\n  /**\n   * Initializer used to generate AttachmentActions\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Post a new attachment action for a message with attachment.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {AttachmentActionObject} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           }\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *    return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      }\n   *    })\n   *    .then(function(attachmentAction)){\n   *      var assert = require('assert');\n   *      assert(attachmentAction.id);\n   *      assert(attachmentAction.type);\n   *      assert(attachmentAction.personId);\n   *      assert(attachmentAction.inputs);\n   *      assert(attachmentAction.messageId);\n   *      assert(attachmentAction.roomId);\n   *      assert(attachmentAction.created);\n   *      return 'success';\n   *     }\n   *   });\n   *   // => success\n   */\n  create(attachmentAction) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'attachment/actions',\n      body: attachmentAction\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single attachment action.\n   * @instance\n   * @memberof AttachmentActions\n   * @param {string} attachmentAction\n   * @returns {Promise<AttachmentActionObject>}\n   * @example\n   * var attachmentAction;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id,\n   *       attachments:[ {\n   *          contentType: 'application/vnd.microsoft.card.adaptive',\n   *         content: {\n   *           type: 'AdaptiveCard',\n   *           version: '1.0',\n   *           body: [\n   *            {\n   *             type: 'TextBlock',\n   *             text: '',\n   *             size: 'large'\n   *             },\n   *           {\n   *             type: 'TextBlock',\n   *             text: 'Adaptive Cards',\n   *             separation: 'none'\n   *           },\n   *           {\n   *           type: 'Input.Date',\n   *           id: 'dueDate'\n   *           }\n   *       ],\n   *     actions: [\n   *         {\n   *             type: 'Action.Submit',\n   *             title: 'Due Date'\n   *         }\n   *     ]\n   *   }\n   *  }]\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     return webex.attachmentActions.create({\n   *      type: 'submit',\n   *      messageId: message.id,\n   *      inputs:{\n   *        dueDate: '26/06/1995'\n   *      });\n   *   })\n   *   .then(function(attachmentAction) {\n   *     return webex.attachmentActions.get(attachmentAction.id)\n   *   })\n   *    .then(function(attachmentAction){\n   *        var assert = require('assert');\n   *        assert.deepEqual(attachmentAction, attachmentAction);\n   *        return 'success';\n   *      })\n   *   // => success\n   */\n  get(attachmentAction) {\n    const id = attachmentAction.id || attachmentAction;\n\n    return this.request({\n      service: 'hydra',\n      resource: `attachment/actions/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  }\n});\n\nexport default AttachmentActions;\n"]}